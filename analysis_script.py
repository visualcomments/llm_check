import json
import pandas as pd
from datetime import datetime
import os
import sys
import matplotlib.pyplot as plt
import seaborn as sns

# --- –ù–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ---
# –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib –∏ seaborn:
# pip install matplotlib seaborn
# -------------------------

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
VALIDATION_OUTPUT_FOLDER = "./validation_output"
TOP_N_ERRORS = 10 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

def ensure_output_folder(folder_name: str = VALIDATION_OUTPUT_FOLDER) -> str:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    path = os.path.abspath(os.path.join(os.getcwd(), folder_name))
    os.makedirs(path, exist_ok=True)
    return path

def main():
    output_folder = ensure_output_folder()
    validation_file = os.path.join(output_folder, "comprehensive_validation.json")
    
    if not os.path.exists(validation_file):
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{validation_file}'", file=sys.stderr)
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ validation_script –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", file=sys.stderr)
        return

    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ {validation_file}...")
    try:
        with open(validation_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç. {e}", file=sys.stderr)
        return
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", file=sys.stderr)
        return

    models_data = data.get('models', [])
    
    if not models_data:
        print("–î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
        
    df = pd.DataFrame(models_data)
    
    # --- –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
    print("\n" + "="*70)
    print("–ê–ù–ê–õ–ò–ó: –í–∞–ª–∏–¥–∞—Ü–∏—è (Unittest Execution)")
    print(f"–ó–∞–¥–∞—á–∞: {data.get('validation_task', 'Unknown')}")
    print("="*70)
    
    total_models = len(df)
    successful_models = df['overall_success'].sum()
    success_rate = (successful_models / total_models) if total_models else 0
    
    print(f"\n–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_models}/{total_models} ({success_rate:.1%}) –º–æ–¥–µ–ª–µ–π –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã.")
    
    print(f"\n–¢–æ–ø {min(10, int(successful_models))} —É—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–ø–µ—Ä–≤—ã–µ 10):")
    successful_df = df[df['overall_success'] == True]
    print(successful_df.head(10)[['model', 'overall_success']].to_string(index=False))

    # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ ---
    print("\n" + "="*70)
    print(f"–ê–Ω–∞–ª–∏–∑ {total_models - successful_models} –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("="*70)
    failed_df = df[df['overall_success'] == False].copy()
    error_counts = pd.Series(dtype=int)

    if not failed_df.empty:
        # –í–∞—à —Ñ–∏–∫—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ - –æ–Ω —Ö–æ—Ä–æ—à–∏–π –∏ –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        failed_df['error_summary'] = failed_df['error_log'].astype(str).apply(str.splitlines).str[-1].str.slice(0, 100)
        error_counts = failed_df['error_summary'].value_counts().head(TOP_N_ERRORS)
        
        print(f"\n–¢–æ–ø-{len(error_counts)} —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫:")
        print(error_counts.to_string(name="Count"))
        print(f"\n–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ —Å–º. –≤ 'analysis_data.csv'")
    else:
        print("\n–í—Å–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç—ã. –û—à–∏–±–æ–∫ –Ω–µ—Ç. üéâ")

    # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã) ---
    print("\n" + "="*70)
    print("–ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–µ—Å—Ç-–∫–µ–π—Å–∞–º")
    print("="*70)
    test_success_rates = pd.Series(dtype=float)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ—Å—Ç–∞–º
        if 'test_results' not in df.columns or df['test_results'].isnull().all():
            print("–í JSON –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö 'test_results'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç–µ—Å—Ç–∞–º.")
        else:
            # "–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º" –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω —Ç–µ—Å—Ç –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
            test_df = pd.json_normalize(models_data, record_path='test_results', meta=['model'])
            
            if not test_df.empty:
                # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
                test_success_rates = test_df.groupby('test_name')['success'].mean().sort_values(ascending=False)
                print("\n–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç-–∫–µ–π—Å—É:")
                print(test_success_rates.to_string(float_format='{:.1%}'.format))
            else:
                print("–°–ø–∏—Å–æ–∫ 'test_results' –ø—É—Å—Ç. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ç–µ—Å—Ç–∞–º.")

    except KeyError:
        print("–û—à–∏–±–∫–∞: 'test_results' –Ω–∞–π–¥–µ–Ω, –Ω–æ –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–Ω–∞–ø—Ä., –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'test_name' –∏–ª–∏ 'success').")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ 'test_results': {e}")


    # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π ---
    print("\n" + "="*70)
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    print("="*70)
    
    sns.set_theme(style="whitegrid")

    # 1. –ì—Ä–∞—Ñ–∏–∫: –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (Pie Chart)
    try:
        success_counts = df['overall_success'].value_counts().sort_index()
        labels = ['Failed', 'Passed'] if len(success_counts) == 2 else (['Passed'] if success_counts.index[0] else ['Failed'])
        colors = ['#FF6B6B', '#6BFF6B'] if len(success_counts) == 2 else (['#6BFF6B'] if success_counts.index[0] else ['#FF6B6B'])

        plt.figure(figsize=(8, 6))
        plt.pie(success_counts, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors)
        plt.title('–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π')
        plot_path = os.path.join(output_folder, 'plot_overall_success.png')
        plt.savefig(plot_path)
        plt.close()
        print(f"  [+] –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plot_path}")
    except Exception as e:
        print(f"  [!] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {e}")

    # 2. –ì—Ä–∞—Ñ–∏–∫: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Ç–µ—Å—Ç–∞–º (Bar Chart)
    if not test_success_rates.empty:
        try:
            plt.figure(figsize=(10, max(6, len(test_success_rates) * 0.5))) # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
            sns.barplot(x=test_success_rates.values * 100, y=test_success_rates.index, orient='h', palette="viridis")
            plt.title('–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–æ —Ç–µ—Å—Ç-–∫–µ–π—Å–∞–º')
            plt.xlabel('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)')
            plt.ylabel('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞')
            plt.xlim(0, 100)
            plt.tight_layout()
            plot_path = os.path.join(output_folder, 'plot_test_success_rates.png')
            plt.savefig(plot_path)
            plt.close()
            print(f"  [+] –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–µ—Å—Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plot_path}")
        except Exception as e:
            print(f"  [!] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ —Ç–µ—Å—Ç–∞–º: {e}")

    # 3. –ì—Ä–∞—Ñ–∏–∫: –¢–æ–ø –æ—à–∏–±–æ–∫ (Bar Chart)
    if not error_counts.empty:
        try:
            plt.figure(figsize=(10, max(6, len(error_counts) * 0.6))) # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
            sns.barplot(x=error_counts.values, y=error_counts.index, orient='h', palette="rocket")
            plt.title(f'–¢–æ–ø-{len(error_counts)} —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫')
            plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            plt.ylabel('–°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–µ (—É—Å–µ—á–µ–Ω–æ)')
            plt.tight_layout()
            plot_path = os.path.join(output_folder, 'plot_common_errors.png')
            plt.savefig(plot_path)
            plt.close()
            print(f"  [+] –ì—Ä–∞—Ñ–∏–∫ –ø–æ –æ—à–∏–±–∫–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plot_path}")
        except Exception as e:
            print(f"  [!] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ –æ—à–∏–±–∫–∞–º: {e}")

    
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ ---
    print("\n" + "="*70)
    print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...")
    print("="*70)
    
    report = {
        'analysis_timestamp': datetime.now().isoformat(),
        'summary': {
            'total_models_analyzed': total_models,
            'fully_successful_models': int(successful_models),
            'failed_models': total_models - int(successful_models),
            'overall_success_rate': success_rate,
            'task': data.get('validation_task', 'Unknown'),
            'top_errors': error_counts.to_dict(), # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            'test_case_success_rates': test_success_rates.to_dict() # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        },
        'all_model_results': models_data
    }
    
    report_file = os.path.join(output_folder, 'analysis_report.json')
    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=4)
        print(f"JSON –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON –æ—Ç—á–µ—Ç–∞: {e}", file=sys.stderr)
    
    csv_file = os.path.join(output_folder, 'analysis_data.csv')
    try:
        # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–∫–∞–∫ 'test_results') –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ CSV –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        df_to_csv = df.drop(columns=['test_results'], errors='ignore')
        df_to_csv.to_csv(csv_file, index=False, encoding='utf-8')
        print(f"CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {csv_file}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
